{"version":3,"sources":["data/tool_logos sync","data/project_images sync","serviceWorker.ts","state/hooks.ts","state/globalSlice.ts","components/CopyButton.tsx","tex/dakotamaddenfong_resume.pdf","pages/MainPage.tsx","pages/NotFoundPage.tsx","data/tool_logos/index.ts","components/ToolCard.tsx","data/project_images/index.ts","components/ProjectInfo.tsx","components/ProjectCard.tsx","pages/PortfolioPage.tsx","Navigation.ts","components/helpers.tsx","components/Header.tsx","components/MenuDrawer.tsx","App.tsx","state/store.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Boolean","window","location","hostname","match","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","darkMode","localStorage","getItem","menuDrawerOpen","globalSlice","createSlice","name","reducers","toggleDarkMode","state","setItem","openMenuDrawer","closeMenuDrawer","actions","selectDarkMode","global","selectMenuDrawerOpen","useStyles","makeStyles","theme","root","icon","marginRight","CopyButton","props","classes","tooltipTimer","useRef","useState","tooltipOpen","setTooltipOpen","copySucceed","setCopySucceed","displayTooltip","current","clearTimeout","setTimeout","Tooltip","title","arrow","open","Button","onClick","navigator","clipboard","writeText","contents","then","style","textTransform","variant","size","color","className","marginTop","text","mainbuttons","contactheader","contactbuttons","divider","width","margin","MainPage","Box","alignItems","display","flexDirection","Typography","align","Divider","ButtonGroup","orientation","href","resume","InsertDriveFileOutlined","history","push","FolderOpen","general","github","GitHub","MailOutline","CallOutlined","topGap","route","backgroundColor","padding","borderRadius","NotFoundPage","pathname","goBack","Home","toolLogos","object","forEach","item","key","replace","default","importAll","require","context","card","maxWidth","avatar","marginBottom","ToolCard","fullLink","page","info","link","Grid","xs","sm","md","lg","Card","raised","CardActionArea","CardContent","Avatar","src","logo","gutterBottom","description","CardActions","IconButton","projectImages","Transition","ref","Slide","direction","TransitionComponent","React","forwardRef","closeButton","visitButton","ProjectInfo","Dialog","keepMounted","onClose","closer","image","DialogTitle","DialogContent","DialogContentText","languages","join","techniques","DialogActions","Close","height","ProjectCard","infoOpen","setInfoOpen","CardMedia","subheader","PortfolioPage","projectkey","projectCards","projects","Object","prototype","hasOwnProperty","call","projectobj","toolkey","toolCards","tools","toolobj","container","spacing","navMap","MobileOnly","Hidden","mdUp","children","DesktopOnly","smDown","white","palette","common","textcolor","primary","noDec","textDecoration","rightSide","marginLeft","spaceRight","navButton","Header","dispatch","DarkModeIcon","SunIcon","MoonIcon","states","entries","value","setter","navItems","point","to","clsx","Fragment","event","currentTarget","Menu","getContentAnchorEl","anchorEl","elevation","anchorOrigin","vertical","horizontal","transformOrigin","map","cName","cPoint","MenuItem","ListItemIcon","ListItemText","AppBar","position","Toolbar","edge","linkText","inactive","secondary","hidden","background","paper","MenuDrawer","index","ListItem","length","SwipeableDrawer","anchor","onOpen","List","lightThemeOptions","type","main","darkThemeOptions","App","lightTheme","createTheme","darkTheme","ThemeProvider","CssBaseline","Container","exact","path","component","Main","Portfolio","NotFound","store","configureStore","reducer","globalReducer","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe61bfef.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 105;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 106;","/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import {\r\n    TypedUseSelectorHook,\r\n    useDispatch,\r\n    useSelector,\r\n} from 'react-redux';\r\nimport type {\r\n    RootState,\r\n    AppDispatch,\r\n} from './store';\r\n\r\n// Typed redux hooks\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nimport {RootState} from './store';\r\n\r\n// Slice of global state\r\nexport interface GlobalState {\r\n    darkMode: boolean;\r\n    menuDrawerOpen: boolean;\r\n}\r\n\r\nconst initialState: GlobalState = {\r\n    darkMode: Boolean(localStorage.getItem('darkMode')),\r\n    menuDrawerOpen: false,\r\n};\r\n\r\nexport const globalSlice = createSlice({\r\n    name: 'global',\r\n    initialState,\r\n    reducers: {\r\n        // toggle the mode and save to localstorage\r\n        toggleDarkMode: (state) => {\r\n\r\n            state.darkMode = !state.darkMode;\r\n            localStorage.setItem('darkMode', state.darkMode ? 'on' : '');\r\n\r\n        },\r\n        openMenuDrawer: (state) => {\r\n\r\n            state.menuDrawerOpen = true;\r\n\r\n        },\r\n        closeMenuDrawer: (state) => {\r\n\r\n            state.menuDrawerOpen = false;\r\n\r\n        },\r\n    },\r\n});\r\n\r\n// extract actions\r\nexport const {toggleDarkMode, openMenuDrawer, closeMenuDrawer} = globalSlice.actions;\r\n\r\n// selectors\r\nexport const selectDarkMode = (state: RootState): boolean => state.global.darkMode;\r\nexport const selectMenuDrawerOpen = (state: RootState): boolean => state.global.menuDrawerOpen;\r\n\r\nexport default globalSlice.reducer;\r\n","import React, {useState, useRef} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Tooltip,\r\n    makeStyles,\r\n    SvgIconTypeMap,\r\n} from '@material-ui/core';\r\nimport {OverridableComponent} from '@material-ui/core/OverridableComponent';\r\n\r\n// import {\r\n//     useAppSelector,\r\n//     useAppDispatch,\r\n// } from '../state/hooks';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    },\r\n    icon: {\r\n        marginRight: '0.5rem',\r\n    },\r\n}));\r\n\r\nconst tooltipDuration = 1000;\r\n\r\n// button to copy contents\r\nconst CopyButton = (props: {\r\n    icon: OverridableComponent<SvgIconTypeMap<{}, 'svg'>>,\r\n    contents: string,\r\n    variant?: 'contained' | 'outlined' | 'text',\r\n    size?: 'large' | 'medium' | 'small',\r\n    color?: 'default' | 'inherit' | 'primary' | 'secondary',\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const tooltipTimer = useRef<number | null>(0);\r\n    const [tooltipOpen, setTooltipOpen] = useState(false);\r\n    const [copySucceed, setCopySucceed] = useState(true);\r\n\r\n    const displayTooltip = () => {\r\n\r\n        setTooltipOpen(true);\r\n        if (tooltipTimer.current !== null) {\r\n\r\n            clearTimeout(tooltipTimer.current);\r\n\r\n        }\r\n        tooltipTimer.current = window.setTimeout(\r\n            () => setTooltipOpen(false),\r\n            tooltipDuration,\r\n        );\r\n\r\n    };\r\n\r\n    const handleCopy = () => {\r\n\r\n        navigator.clipboard.writeText(props.contents).then(\r\n            () => {\r\n\r\n                setCopySucceed(true);\r\n                displayTooltip();\r\n\r\n            },\r\n            () => {\r\n\r\n                setCopySucceed(false);\r\n                displayTooltip();\r\n\r\n            },\r\n        );\r\n\r\n    };\r\n\r\n    return (\r\n        <Tooltip\r\n            title={copySucceed ? 'Copied!' : 'Copy failed, please reload page and try again.'}\r\n            arrow\r\n            open={tooltipOpen}\r\n        >\r\n            <Button\r\n                onClick={handleCopy}\r\n                style={{textTransform: 'none'}}\r\n                variant={props.variant}\r\n                size={props.size}\r\n                color={props.color}\r\n            >\r\n                <props.icon className={classes.icon} /> {props.contents}\r\n            </Button>\r\n        </Tooltip>\r\n    );\r\n\r\n};\r\n\r\nexport default CopyButton;\r\n","export default __webpack_public_path__ + \"static/media/dakotamaddenfong_resume.b64abce8.pdf\";","import React from 'react';\r\nimport {\r\n    RouteComponentProps,\r\n} from 'react-router-dom';\r\n\r\nimport {\r\n    Box,\r\n    Typography,\r\n    Divider,\r\n    Button,\r\n    ButtonGroup,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    MailOutline,\r\n    CallOutlined,\r\n    FolderOpen,\r\n    InsertDriveFileOutlined,\r\n    GitHub,\r\n} from '@material-ui/icons';\r\n\r\nimport {\r\n    useAppSelector,\r\n} from '../state/hooks';\r\nimport {\r\n    selectDarkMode,\r\n} from '../state/globalSlice';\r\nimport CopyButton from '../components/CopyButton';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '3rem',\r\n    },\r\n    text: {\r\n        marginTop: '3rem',\r\n    },\r\n    mainbuttons: {\r\n        marginTop: '3rem',\r\n    },\r\n    contactheader: {\r\n        marginTop: '2rem',\r\n    },\r\n    contactbuttons: {\r\n        marginTop: '1rem',\r\n    },\r\n    divider: {\r\n        width: '50%',\r\n        margin: '10px',\r\n    },\r\n    icon: {\r\n        marginRight: '0.5rem',\r\n    },\r\n}));\r\n\r\nimport general from '../data/general.json';\r\nimport resume from '../tex/dakotamaddenfong_resume.pdf';\r\n\r\n// main index page for empty route\r\nconst MainPage = (props: RouteComponentProps<{}>): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    // access dark mode info\r\n    const darkMode = useAppSelector(selectDarkMode);\r\n\r\n    return (\r\n        <Box\r\n            alignItems='center'\r\n            display='flex'\r\n            flexDirection='column'\r\n            className={classes.root}\r\n        >\r\n            <Typography variant='h2' align='center'>\r\n                Dakota Madden-Fong\r\n            </Typography>\r\n            <Divider\r\n                variant='fullWidth'\r\n                className={classes.divider}\r\n            />\r\n            <Typography variant='h2' align='center'>\r\n                TrifectaIII\r\n            </Typography>\r\n\r\n            <Typography\r\n                variant='body1'\r\n                className={classes.text}\r\n            >\r\n                A coder living and working in San Francisco, CA.\r\n                I focus on software and web development.\r\n            </Typography>\r\n\r\n            <ButtonGroup\r\n                orientation='vertical'\r\n                className={classes.mainbuttons}\r\n                variant='contained'\r\n                size='large'\r\n            >\r\n                <Button\r\n                    href={resume}\r\n                    color='primary'\r\n                >\r\n                    <InsertDriveFileOutlined className={classes.icon} /> Resume\r\n                </Button>\r\n                <Button\r\n                    onClick={() => props.history.push('/portfolio')}\r\n                    color='secondary'\r\n                >\r\n                    <FolderOpen className={classes.icon} />  Portfolio\r\n                </Button>\r\n                <Button\r\n                    href={general.github}\r\n                    color='primary'\r\n                >\r\n                    <GitHub className={classes.icon} />  GitHub\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Typography\r\n                variant='h3'\r\n                className={classes.contactheader}\r\n            >\r\n                Contact Info\r\n            </Typography>\r\n            <ButtonGroup\r\n                orientation='vertical'\r\n                className={classes.contactbuttons}\r\n                variant='text'\r\n                color={darkMode ? 'secondary' : 'primary'}\r\n            >\r\n                <CopyButton\r\n                    icon={MailOutline}\r\n                    contents='maddenfong@gmail.com'\r\n                />\r\n                <CopyButton\r\n                    icon={CallOutlined}\r\n                    contents='+1 415 810 0334'\r\n                />\r\n            </ButtonGroup>\r\n        </Box>\r\n    );\r\n\r\n};\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\nimport {\r\n    RouteComponentProps,\r\n} from 'react-router-dom';\r\n\r\nimport {\r\n    Button,\r\n    ButtonGroup,\r\n    Typography,\r\n    Box,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    ArrowBack as BackIcon,\r\n    Home as HomeIcon,\r\n} from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '3rem',\r\n    },\r\n    topGap: {\r\n        marginTop: '3rem',\r\n    },\r\n    route: {\r\n        backgroundColor: 'rgba(128, 128, 128, 0.3)',\r\n        padding: '0.5rem',\r\n        borderRadius: '0.5rem',\r\n    },\r\n}));\r\n\r\n// 404 not found error page\r\nconst NotFoundPage = (props: RouteComponentProps<{}>): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Box\r\n            alignItems='center'\r\n            display='flex'\r\n            flexDirection='column'\r\n            className={classes.root}\r\n        >\r\n            <Typography\r\n                variant='h2'\r\n                align='center'\r\n            >\r\n                404: Not Found\r\n            </Typography>\r\n            <Typography\r\n                variant='body1'\r\n                align='center'\r\n                className={classes.topGap}\r\n            >\r\n                <code className={classes.route}>\r\n                    {props.location.pathname}\r\n                </code> could not be found.\r\n            </Typography>\r\n            <ButtonGroup\r\n                variant='contained'\r\n                className={classes.topGap}\r\n            >\r\n                {/* buttons which function as links */}\r\n                <Button onClick={props.history.goBack} color='secondary'>\r\n                    <BackIcon /> Back\r\n                </Button>\r\n                <Button onClick={() => props.history.push('/')} color='primary'>\r\n                    <HomeIcon /> Home\r\n                </Button>\r\n            </ButtonGroup>\r\n\r\n        </Box>\r\n    );\r\n\r\n};\r\n\r\nexport default NotFoundPage;\r\n","const importAll = (req: __WebpackModuleApi.RequireContext) => {\r\n\r\n    const object: {[key: string]: string} = {};\r\n    req.keys().forEach((item: string) => {\r\n\r\n        const key = item.replace('./', '').\r\n            replace(/_/gu, ' ');\r\n        object[key] = req(item).default;\r\n\r\n    });\r\n    return object;\r\n\r\n};\r\n\r\nconst toolLogos = importAll(require.context('./', false, /\\.(?<image>png|gif)$/u));\r\n\r\nexport default toolLogos;\r\n","import React from 'react';\r\n\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardActions,\r\n    CardActionArea,\r\n    Button,\r\n    IconButton,\r\n    Typography,\r\n    Grid,\r\n    Avatar,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    GitHub,\r\n} from '@material-ui/icons';\r\n\r\nimport general from '../data/general.json';\r\nimport toolLogos from '../data/tool_logos';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    },\r\n    card: {\r\n        // height: '100%',\r\n        maxWidth: '100%',\r\n    },\r\n    avatar: {\r\n        marginBottom: '1rem',\r\n    },\r\n}));\r\n\r\n// Card for displaying a tool\r\nconst ToolCard = (props: {\r\n    name: string,\r\n    info: {\r\n        description: string,\r\n        link: string,\r\n        github: string,\r\n        logo: string,\r\n    }\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const fullLink = `${general.page}/${props.info.link}`;\r\n\r\n    return (\r\n        <Grid\r\n            item\r\n            xs={12}\r\n            sm={6}\r\n            md={4}\r\n            lg={3}\r\n            className={classes.root}\r\n        >\r\n            <Card\r\n                className={classes.card}\r\n                raised\r\n            >\r\n                <CardActionArea href={fullLink}>\r\n                    <CardContent>\r\n                        <Avatar\r\n                            src={toolLogos[props.info.logo]}\r\n                            variant='rounded'\r\n                            className={classes.avatar}\r\n                        />\r\n                        <Typography variant='h5' gutterBottom>\r\n                            {props.name}\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>\r\n                            {props.info.description}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    <Button\r\n                        href={fullLink}\r\n                    >\r\n                        Visit\r\n                    </Button>\r\n                    <IconButton href={props.info.github}>\r\n                        <GitHub />\r\n                    </IconButton>\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\nexport default ToolCard;\r\n","const importAll = (req: __WebpackModuleApi.RequireContext) => {\r\n\r\n    const object: {[key: string]: string} = {};\r\n    req.keys().forEach((item: string) => {\r\n\r\n        const key = item.replace('./', '').\r\n            replace(/_/gu, ' ');\r\n        object[key] = req(item).default;\r\n\r\n    });\r\n    return object;\r\n\r\n};\r\n\r\nconst projectImages = importAll(require.context('./', false, /\\.(?<image>png|gif)$/u));\r\n\r\nexport default projectImages;\r\n","import React from 'react';\r\n\r\nimport {\r\n    Slide,\r\n    SlideProps,\r\n    Dialog,\r\n    DialogTitle,\r\n    Button,\r\n    IconButton,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    GitHub,\r\n    Close,\r\n} from '@material-ui/icons';\r\n\r\nimport projectImages from '../data/project_images';\r\n\r\nconst Transition = (\r\n    props: JSX.IntrinsicAttributes & SlideProps,\r\n    ref: React.Ref<unknown> | undefined,\r\n) => <Slide direction='up' ref={ref} {...props} />;\r\nconst TransitionComponent = React.forwardRef(Transition);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    },\r\n    closeButton: {\r\n        // position: 'absolute',\r\n        // right: theme.spacing(1),\r\n        // top: theme.spacing(1),\r\n    },\r\n    visitButton: {\r\n        marginRight: '1rem',\r\n    },\r\n}));\r\n\r\n// info modal for projects\r\nconst ProjectInfo = (props: {\r\n    open: boolean,\r\n    name: string,\r\n    info: {\r\n        link: string,\r\n        github: string,\r\n        languages: string[],\r\n        techniques: string[],\r\n        description: string,\r\n        image: string,\r\n    },\r\n    closer: () => void,\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.open}\r\n            TransitionComponent={TransitionComponent}\r\n            keepMounted\r\n            onClose={props.closer}\r\n            className={classes.root}\r\n        >\r\n            <img src={projectImages[props.info.image]} />\r\n            <DialogTitle>\r\n                {props.name}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {props.info.description}\r\n                </DialogContentText>\r\n                <DialogContentText>\r\n                    <b>Languages:</b>&nbsp;\r\n                    {props.info.languages.join(', ')}\r\n                </DialogContentText>\r\n                <DialogContentText>\r\n                    <b>Techniques:</b>&nbsp;\r\n                    {props.info.techniques.join(', ')}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    href={props.info.link}\r\n                    color='primary'\r\n                    variant='contained'\r\n                    className={classes.visitButton}\r\n                >\r\n                    Visit\r\n                </Button>\r\n                <IconButton href={props.info.github}>\r\n                    <GitHub />\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={props.closer}\r\n                    color='secondary'\r\n                    className={classes.closeButton}\r\n                >\r\n                    <Close />\r\n                </IconButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n\r\n};\r\n\r\nexport default ProjectInfo;\r\n","import React, {useState} from 'react';\r\n\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardActions,\r\n    CardActionArea,\r\n    CardMedia,\r\n    Typography,\r\n    Grid,\r\n    Button,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\n\r\nimport ProjectInfo from './ProjectInfo';\r\nimport projectImages from '../data/project_images';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    },\r\n    card: {\r\n        // height: '100%',\r\n        maxWidth: '100%',\r\n    },\r\n    image: {\r\n        height: '10rem',\r\n    },\r\n}));\r\n\r\n// Card for displaying a project\r\nconst ProjectCard = (props: {\r\n    name: string,\r\n    info: {\r\n        link: string,\r\n        github: string,\r\n        languages: string[],\r\n        techniques: string[],\r\n        description: string,\r\n        image: string,\r\n    },\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [infoOpen, setInfoOpen] = useState(false);\r\n\r\n    return (\r\n        <Grid\r\n            item\r\n            xs={12}\r\n            sm={6}\r\n            md={4}\r\n            lg={3}\r\n            className={classes.root}\r\n        >\r\n            <Card\r\n                className={classes.card}\r\n                raised\r\n            >\r\n                <CardActionArea\r\n                    onClick={() => setInfoOpen(true)}\r\n                >\r\n                    <CardMedia\r\n                        className={classes.image}\r\n                        image={projectImages[props.info.image]}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography variant='h5' gutterBottom>\r\n                            {props.name}\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>\r\n                            {props.info.description}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    <Button\r\n                        href={props.info.link}\r\n                    >\r\n                        Visit\r\n                    </Button>\r\n                    <Button onClick={() => setInfoOpen(true)}>\r\n                        More Info\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n            <ProjectInfo\r\n                open={infoOpen}\r\n                name={props.name}\r\n                info={props.info}\r\n                closer={() => setInfoOpen(false)}\r\n            />\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React from 'react';\r\nimport {\r\n    RouteComponentProps,\r\n} from 'react-router-dom';\r\n\r\nimport {\r\n    Box,\r\n    Typography,\r\n    Grid,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\n\r\nimport ToolCard from '../components/ToolCard';\r\nimport ProjectCard from '../components/ProjectCard';\r\nimport tools from '../data/tools.json';\r\nimport projects from '../data/projects.json';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '3rem',\r\n    },\r\n    subheader: {\r\n        marginTop: '3rem',\r\n        marginBottom: '3rem',\r\n    },\r\n}));\r\n\r\n// Portfolio page showing off other projects\r\nconst PortfolioPage = (props: RouteComponentProps<{}>): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    // generate cards for projects\r\n    const projectCards: JSX.Element[] = [];\r\n    let projectkey: keyof typeof projects;\r\n    for (projectkey in projects) {\r\n\r\n        if (Object.prototype.hasOwnProperty.call(projects, projectkey)) {\r\n\r\n            const projectobj = projects[projectkey];\r\n            projectCards.push(<ProjectCard key={projectkey} name={projectkey} info={projectobj} />);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // generate cards for tools\r\n    const toolCards: JSX.Element[] = [];\r\n    let toolkey: keyof typeof tools;\r\n    for (toolkey in tools) {\r\n\r\n        if (Object.prototype.hasOwnProperty.call(tools, toolkey)) {\r\n\r\n            const toolobj = tools[toolkey];\r\n            toolCards.push(<ToolCard key={toolkey} name={toolkey} info={toolobj} />);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            alignItems='center'\r\n            display='flex'\r\n            flexDirection='column'\r\n            className={classes.root}\r\n        >\r\n            <Typography variant='h2'>\r\n                Portfolio\r\n            </Typography>\r\n            <Typography\r\n                variant='h3'\r\n                className={classes.subheader}\r\n            >\r\n                Projects\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n                {projectCards}\r\n            </Grid>\r\n            <Typography\r\n                variant='h3'\r\n                className={classes.subheader}\r\n            >\r\n                Tools\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n                {toolCards}\r\n            </Grid>\r\n        </Box>\r\n    );\r\n\r\n};\r\n\r\nexport default PortfolioPage;\r\n","import {SvgIconTypeMap} from '@material-ui/core';\r\nimport {OverridableComponent} from '@material-ui/core/OverridableComponent';\r\nimport {\r\n    FolderOpen,\r\n} from '@material-ui/icons';\r\n\r\n// Type to determine navigation options on header\r\nexport interface NavMapType {\r\n    [key: string]: {\r\n        icon: OverridableComponent<SvgIconTypeMap<{}, 'svg'>>,\r\n        route: string,\r\n    } | {\r\n        icon: OverridableComponent<SvgIconTypeMap<{}, 'svg'>>,\r\n        children: {\r\n            [key: string]:{\r\n                icon: OverridableComponent<SvgIconTypeMap<{}, 'svg'>>,\r\n                route: string,\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\n// navmap for this app\r\nexport const navMap: NavMapType = {\r\n    'Portfolio': {\r\n        icon: FolderOpen,\r\n        route: '/portfolio',\r\n    },\r\n};\r\n","import React from 'react';\r\n\r\nimport {Hidden} from '@material-ui/core';\r\n\r\n// wrapper components for mobile-only or desktop-only elements\r\nexport const MobileOnly = (props: {\r\n    children: React.ReactNode,\r\n}): JSX.Element => <Hidden mdUp>{props.children}</Hidden>;\r\nexport const DesktopOnly = (props: {\r\n    children: React.ReactNode,\r\n}): JSX.Element => <Hidden smDown>{props.children}</Hidden>;\r\n","import React, {useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {\r\n    Button,\r\n    AppBar,\r\n    Box,\r\n    Toolbar,\r\n    Typography,\r\n    IconButton,\r\n    Tooltip,\r\n    Menu,\r\n    MenuItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    Brightness3 as MoonIcon,\r\n    Brightness7 as SunIcon,\r\n    Menu as MenuIcon,\r\n    ArrowDropDown as ExpandIcon,\r\n} from '@material-ui/icons';\r\nimport clsx from 'clsx';\r\n\r\nimport {navMap} from '../Navigation';\r\nimport {\r\n    MobileOnly,\r\n    DesktopOnly,\r\n} from './helpers';\r\nimport {\r\n    useAppSelector,\r\n    useAppDispatch,\r\n} from '../state/hooks';\r\nimport {\r\n    selectDarkMode,\r\n    toggleDarkMode,\r\n    openMenuDrawer,\r\n} from '../state/globalSlice';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    },\r\n    white: {\r\n        color: theme.palette.common.white,\r\n    },\r\n    textcolor: {\r\n        color: theme.palette.text.primary,\r\n    },\r\n    noDec: {\r\n        textDecoration: 'none',\r\n    },\r\n    rightSide: {\r\n        marginLeft: 'auto',\r\n    },\r\n    spaceRight: {\r\n        marginRight: '0.5rem',\r\n    },\r\n    navButton: {\r\n        color: theme.palette.common.white,\r\n        textTransform: 'none',\r\n        marginRight: '1rem',\r\n    },\r\n}));\r\n\r\n// Main page header for navigation, global state\r\nconst Header = (props: {}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useAppDispatch();\r\n    const darkMode = useAppSelector(selectDarkMode);\r\n\r\n    const DarkModeIcon = darkMode ? SunIcon : MoonIcon;\r\n\r\n    // Generate state for any nav group menus\r\n    const states: {\r\n        [key: string]: {\r\n            value: EventTarget & HTMLSpanElement | null,\r\n            setter: React.Dispatch<React.SetStateAction<EventTarget & HTMLSpanElement | null>>,\r\n        }\r\n    } = {};\r\n    Object.entries(navMap).forEach(([name, point]) => {\r\n\r\n        if ('children' in point) {\r\n\r\n            const [value, setter] = useState<EventTarget & HTMLSpanElement | null>(null);\r\n            states[name] = {\r\n                value,\r\n                setter,\r\n            };\r\n\r\n        }\r\n\r\n    });\r\n\r\n    // Generate navitems jsx from navmap\r\n    const navItems: JSX.Element[] = [];\r\n    Object.entries(navMap).forEach(([name, point]) => {\r\n\r\n        if ('route' in point) {\r\n\r\n            navItems.push(<Link\r\n                to={point.route}\r\n                key={name}\r\n                className={clsx(\r\n                    classes.white,\r\n                    classes.noDec,\r\n                )}\r\n            >\r\n                <Button className={classes.navButton}>\r\n                    <point.icon className={classes.spaceRight} />\r\n                    <Typography variant='body1'>\r\n                        {name}\r\n                    </Typography>\r\n                </Button>\r\n            </Link>);\r\n\r\n        } else {\r\n\r\n            navItems.push(<React.Fragment key={name}>\r\n                <Button\r\n                    onClick={(event) => states[name].setter(event.currentTarget)}\r\n                    className={classes.navButton}\r\n                >\r\n                    <point.icon className={classes.spaceRight} />\r\n                    <Typography variant='body1'>\r\n                        {name}\r\n                    </Typography>\r\n                    <ExpandIcon />\r\n                </Button>\r\n\r\n                <Menu\r\n                    getContentAnchorEl={null}\r\n                    anchorEl={states[name].value}\r\n                    open={Boolean(states[name].value)}\r\n                    onClose={() => states[name].setter(null)}\r\n                    elevation={0}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    keepMounted\r\n                >\r\n                    {Object.entries(point.children).\r\n                        map(([cName, cPoint]) => <Link\r\n                            to={cPoint.route}\r\n                            key={cName}\r\n                            className={clsx(\r\n                                classes.noDec,\r\n                                classes.textcolor,\r\n                            )}\r\n                        >\r\n                            <MenuItem\r\n                                onClick={() => states[name].setter(null)}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <cPoint.icon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={cName} />\r\n                            </MenuItem>\r\n                        </Link>)\r\n                    }\r\n                </Menu>\r\n            </React.Fragment>);\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <AppBar\r\n                position='fixed'\r\n                className={classes.root}\r\n            >\r\n                <Toolbar>\r\n\r\n                    <MobileOnly>\r\n\r\n                        <IconButton\r\n                            edge='start'\r\n                            className={classes.white}\r\n                            onClick={() => dispatch(openMenuDrawer())}\r\n                        >\r\n                            <MenuIcon color='inherit' />\r\n                        </IconButton>\r\n\r\n                    </MobileOnly>\r\n\r\n                    <Link\r\n                        to='/'\r\n                        className={clsx(\r\n                            classes.noDec,\r\n                            classes.white,\r\n                        )}\r\n                    >\r\n                        <Button className={classes.navButton}>\r\n                            <Typography variant='h5'>\r\n                                Dakota Madden-Fong\r\n                            </Typography>\r\n                        </Button>\r\n                    </Link>\r\n\r\n                    <DesktopOnly>\r\n                        <Box\r\n                            display='flex'\r\n                        >\r\n                            {navItems}\r\n                        </Box>\r\n                    </DesktopOnly>\r\n\r\n                    {/* right side */}\r\n                    <Tooltip\r\n                        title={darkMode ? 'Light Mode' : 'Dark Mode'}\r\n                        className={classes.rightSide}\r\n                    >\r\n                        <IconButton\r\n                            edge='end'\r\n                            className={classes.white}\r\n                            onClick={() => dispatch(toggleDarkMode())}\r\n                        >\r\n                            <DarkModeIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            {/* toolbar for ofsetting page elements */}\r\n            <Toolbar />\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {\r\n    Box,\r\n    SwipeableDrawer,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Divider,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    ArrowRightAlt as InnerIcon,\r\n    Home,\r\n} from '@material-ui/icons';\r\n\r\nimport {navMap} from '../Navigation';\r\nimport {MobileOnly} from './helpers';\r\nimport {\r\n    useAppSelector,\r\n    useAppDispatch,\r\n} from '../state/hooks';\r\nimport {\r\n    selectMenuDrawerOpen,\r\n    openMenuDrawer,\r\n    closeMenuDrawer,\r\n} from '../state/globalSlice';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '1rem',\r\n    },\r\n    linkText: {\r\n        textDecoration: 'none',\r\n        color: theme.palette.text.primary,\r\n        '&:hover': {\r\n            textDecoration: 'underline',\r\n        },\r\n    },\r\n    inactive: {\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    hidden: {\r\n        color: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\n// drawer for navigation on mobile view\r\nconst MenuDrawer = (props: {}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const open = useAppSelector(selectMenuDrawerOpen);\r\n\r\n    // Generate navitems jsx from navmap\r\n    const navItems: JSX.Element[] = [];\r\n    Object.entries(navMap).\r\n        forEach(([name, point], index) => {\r\n\r\n            if ('route' in point) {\r\n\r\n                navItems.push(<Link\r\n                    to={point.route}\r\n                    key={name}\r\n                    className={classes.linkText}\r\n                    onClick={() => dispatch(closeMenuDrawer())}\r\n                >\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <point.icon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={name} />\r\n                    </ListItem>\r\n                </Link>);\r\n\r\n            } else {\r\n\r\n                navItems.push(<ListItem\r\n                    key={name}\r\n                    className={classes.inactive}\r\n                >\r\n                    <ListItemIcon className={classes.inactive}>\r\n                        <point.icon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={name} />\r\n                </ListItem>);\r\n\r\n                Object.entries(point.children).\r\n                    forEach(([cName, cPoint]) => {\r\n\r\n                        navItems.push(<Link\r\n                            to={cPoint.route}\r\n                            key={cName}\r\n                            className={classes.linkText}\r\n                            onClick={() => dispatch(closeMenuDrawer())}\r\n                        >\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <InnerIcon className={classes.hidden}/>\r\n                                </ListItemIcon>\r\n                                <ListItemIcon>\r\n                                    <cPoint.icon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={cName} />\r\n                            </ListItem>\r\n                        </Link>);\r\n\r\n                    });\r\n\r\n            }\r\n\r\n            // add a divider it its not the last point\r\n            if (index < Object.keys(navMap).length - 1) {\r\n\r\n                navItems.push(<Divider key={`div${index}`} />);\r\n\r\n            }\r\n\r\n        });\r\n\r\n    return (\r\n        <MobileOnly>\r\n            <SwipeableDrawer\r\n                anchor='left'\r\n                open={open}\r\n                onOpen={() => dispatch(openMenuDrawer())}\r\n                onClose={() => dispatch(closeMenuDrawer())}\r\n            >\r\n                <Box className={classes.root}>\r\n                    <List>\r\n                        {/* home item */}\r\n                        <Link\r\n                            to='/'\r\n                            className={classes.linkText}\r\n                            onClick={() => dispatch(closeMenuDrawer())}\r\n                        >\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <Home />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary='Home' />\r\n                            </ListItem>\r\n                        </Link>\r\n                        {navItems}\r\n                    </List>\r\n                </Box>\r\n            </SwipeableDrawer>\r\n        </MobileOnly>\r\n    );\r\n\r\n};\r\n\r\nexport default MenuDrawer;\r\n","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from 'react-router-dom';\r\n\r\nimport {\r\n    Container,\r\n    CssBaseline,\r\n    ThemeProvider,\r\n    createTheme,\r\n    ThemeOptions,\r\n} from '@material-ui/core';\r\n\r\nimport Main from './pages/MainPage';\r\nimport NotFound from './pages/NotFoundPage';\r\nimport Portfolio from './pages/PortfolioPage';\r\nimport Header from './components/Header';\r\nimport MenuDrawer from './components/MenuDrawer';\r\nimport {useAppSelector} from './state/hooks';\r\nimport {selectDarkMode} from './state/globalSlice';\r\n\r\n// set up dark and light themes\r\n// https://material-ui.com/customization/color/#playground\r\nconst lightThemeOptions: ThemeOptions = {\r\n    palette: {\r\n        type: 'light',\r\n        primary: {\r\n            main: '#794BC4',\r\n        },\r\n        secondary: {\r\n            main: '#e65100',\r\n        },\r\n    },\r\n};\r\nconst darkThemeOptions: ThemeOptions = {\r\n    palette: {\r\n        type: 'dark',\r\n        primary: {\r\n            main: '#794BC4',\r\n        },\r\n        secondary: {\r\n            main: '#e65100',\r\n        },\r\n    },\r\n};\r\n\r\n// Main App component\r\nconst App = (): JSX.Element => {\r\n\r\n    // choose theme based on state\r\n    const darkMode = useAppSelector(selectDarkMode);\r\n    const lightTheme = createTheme(lightThemeOptions);\r\n    const darkTheme = createTheme(darkThemeOptions);\r\n    const theme = darkMode ? darkTheme : lightTheme;\r\n\r\n    return (\r\n        // provider theme\r\n        <ThemeProvider theme={theme}>\r\n\r\n            {/* normalize css */}\r\n            <CssBaseline />\r\n\r\n            <Router>\r\n                {/* include header and menu on every page */}\r\n                <Header />\r\n                <MenuDrawer />\r\n\r\n                {/* route based on url */}\r\n                <Container>\r\n                    <Switch>\r\n                        {/* main page */}\r\n                        <Route\r\n                            exact path='/'\r\n                            component={Main}\r\n                        />\r\n                        <Route\r\n                            exact path='/'\r\n                            component={Main}\r\n                        />\r\n                        <Route\r\n                            exact path='/portfolio'\r\n                            component={Portfolio}\r\n                        />\r\n                        {/* default to 404 */}\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </Container>\r\n            </Router>\r\n        </ThemeProvider>\r\n    );\r\n\r\n};\r\n\r\nexport default App;\r\n","import {\r\n    configureStore,\r\n    ThunkAction,\r\n    Action,\r\n} from '@reduxjs/toolkit';\r\n\r\nimport globalReducer from './globalSlice';\r\n\r\n// Store containing all state slices\r\nexport const store = configureStore({\r\n    reducer: {\r\n        global: globalReducer,\r\n    },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    RootState,\r\n    unknown,\r\n    Action<string>\r\n>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\nimport {store} from './state/store';\r\n\r\n// Entry point for app\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        {/* Provide redux store */}\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n/*\r\n * If you want your app to work offline and load faster, you can change\r\n * unregister() to register() below. Note this comes with some pitfalls.\r\n * Learn more about service workers: https://bit.ly/CRA-PWA\r\n */\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}